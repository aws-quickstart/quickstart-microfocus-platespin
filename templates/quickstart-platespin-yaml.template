AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template creates the Amazon EC2 instance into an existing VPC and related
  resources for the PlateSpin Migrate Quick Start. See the deployment guide at
  http://aws.amazon.com/quickstart for details. ***NOTE*** This template creates
  Amazon EC2 instances and related resources. You will be billed for the AWS
  resources used if you create a stack from this template.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCID
          - PublicSubnetID
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - MigrateServerInstanceType
          - AssignElasticIP
          - KeyPairName
          - ReplicationAccessCIDR
          - ManagementAccessCIDR
          - TargetWorkloadsInterconnectCIDR
          - SNSTopicMailID
      - Label:
          default: PlateSpin Migrate server configuration
        Parameters:
          - MigrateServerHostname
          - MigrateAdminUsername
          - MigrateAdminPassword
          - MigrateAdminConfirmPassword
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      AssignElasticIP:
        default: Assign elastic IP
      KeyPairName:
        default: Key pair name
      PublicSubnetID:
        default: Public subnet ID
      ReplicationAccessCIDR:
        default: Replication access CIDR
      ManagementAccessCIDR:
        default: Management access CIDR
      TargetWorkloadsInterconnectCIDR:
        default: Target workloads interconnect CIDR
      VPCID:
        default: VPC ID
      MigrateServerInstanceType:
        default: Migrate server instance type
      SNSTopicMailID:
        default: Email ID
      MigrateServerHostname:
        default: Hostname
      MigrateAdminUsername:
        default: Admin username
      MigrateAdminPassword:
        default: Admin password
      MigrateAdminConfirmPassword:
        default: Admin confirm password
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
Parameters:
  MigrateServerHostname:
    Description: >-
      The hostname for your PlateSpin Migrate server (up to 15 characters). This name can contain alphanumeric characters, and hyphens, but should start with a letter and can not end with a hyphen.
    Type: String
    Default: PSMigrate
    MaxLength: '15'
    AllowedPattern: '^[a-zA-Z]|([a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9]$)'
    ConstraintDescription: >-
      Must begin with a letter, contain alphanumeric characters and hyphens, and can not end with a hyphen. Maximum length upto 15 characters.
  MigrateAdminUsername:
    Description: The username for the PlateSpin Migrate server admin account. This name must be of 5-25 length containing only alphanumeric characters.
    Type: String
    Default: psadmin
    MinLength: '5'
    MaxLength: '25'
    AllowedPattern: '[a-zA-Z0-9]*'
  MigrateAdminPassword:
    Description: >-
      The password for the PlateSpin Migrate server admin account. This password must be of 8-32 length containing letters, numbers and symbols.
    Type: String
    MinLength: '8'
    MaxLength: '32'
    AllowedPattern: >-
      (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    NoEcho: 'true'
  MigrateAdminConfirmPassword:
    Description: >-
      Confirm the password for the PlateSpin Migrate server admin account.
    Type: String
    MinLength: '8'
    MaxLength: '32'
    AllowedPattern: >-
      (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    NoEcho: 'true'
  MigrateServerInstanceType:
    Description: The Amazon EC2 instance type for your PlateSpin Migrate server.
    Type: String
    Default: t2.large
    AllowedValues:
      - t2.large
      - t2.xlarge
      - t3.large
      - t3.xlarge
      - m4.large
      - m4.xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  KeyPairName:
    Description: >-
      The name of an existing EC2 key pair, which allows you to securely connect to your instance after it launches.
    Type: 'AWS::EC2::KeyPair::KeyName'
    AllowedPattern: .+
    ConstraintDescription: Must be the name of an existing EC2 key pair.
  VPCID:
    Description: The VPC ID for launching PlateSpin Migrate server instance.
    Type: 'AWS::EC2::VPC::Id'
    AllowedPattern: .+
    ConstraintDescription: Must be a valid VPC ID.
  PublicSubnetID:
    Description: The Public subnet ID for launching PlateSpin Migrate server instance.
    Type: 'AWS::EC2::Subnet::Id'
    AllowedPattern: .+
    ConstraintDescription: Must be a valid Subnet ID.
  AssignElasticIP:
    Description: >-
      Select No to not assign a Public Elastic IP address to the PlateSpin Migrate server.
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
  ReplicationAccessCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: >-
      The CIDR range from which the PlateSpin Migrate server Web UI and services can be accessed through HTTPS and data transfer ports. 
      For example, to get full access, specify 0.0.0.0/0.
    Type: String
  ManagementAccessCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: >-
      The CIDR range from which the PlateSpin Migrate server and target instances can be accessed through RDP and SSH. 
      For example, to get full access, specify 0.0.0.0/0.
    Type: String
  TargetWorkloadsInterconnectCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: >-
      The CIDR range from which the PlateSpin Migrate target workloads can be accessed through all TCP ports. 
      For example, to get full access within the selected VPC, specify the CIDR of the VPC.
    Type: String
  SNSTopicMailID:
    Description: >-
      (Optional) The email ID to which AWS CloudWatch alarm notifications about the PlateSpin Migrate server will be sent.
    Type: String
    AllowedPattern: '^$|[\x20-\x45]?[\w-\+]+(\.[\w]+)*@[\w-]+(\.[\w]+)*(\.[a-z]{2,})'
    ConstraintDescription: Must be a valid email ID.
  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-quickstart-migrate
    Description: >-
      The name of the S3 bucket that stores the Quick Start assets. 
      The bucket name can include numbers, lowercase letters, uppercase letters, and hyphens, but should not start or end with a hyphen
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    Default: platespin-migrate/
    Description: >-
      The S3 key name prefix for the Quick Start assets. This prefix can include numbers, lowercase letters, uppercase letters, hyphens, and forward slashes.
    Type: String
Rules:
  'ConfirmPassword':
    Assertions:
      - Assert:
          Fn::Equals:
            - Ref: 'MigrateAdminPassword'
            - Ref: 'MigrateAdminConfirmPassword'
        AssertDescription: 'Migrate admin passwords do not match.'
Conditions:
  AutoAssignEIP: !Equals 
    - !Ref AssignElasticIP
    - 'Yes'
  HaveSNSTopicMailID: !Not
    - !Equals
      - !Ref SNSTopicMailID
      - ''
Mappings:
  AWSAMIRegionMap:
    AMI:
      PSM201811AMI: PSM 2018.11 T10
    us-west-2:
      PSM201811AMI: ami-0b976fe3a00136338
    ap-south-1:
      PSM201811AMI: ami-0e8d0f65b2b3ef667
Resources:
  ServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - PSMServer
          - SG
      GroupDescription: 'Allow access from HTTPS and RDP traffic'
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref ReplicationAccessCIDR
          Description: HTTPS for migrate services
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !GetAtt ReplicationSecurityGroup.GroupId
          Description: HTTPS from PSM Replication SG 
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !GetAtt TargetSecurityGroup.GroupId
          Description: HTTPS from PSM Target SG
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: !Ref ManagementAccessCIDR
          Description: RDP from management network
  ReplicationSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - PSMReplication
          - SG
      GroupDescription: 'Allow access for SSH, PlateSpin Migrate Data transfer'
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3725'
          ToPort: '3725'
          CidrIp: !Ref ReplicationAccessCIDR
          Description: Data Transfer from Source in customer network
  ReplicationSGInboundRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt ReplicationSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: !Join 
        - /
        - - !GetAtt MigrateServerInstance.PrivateIp
          - 32
      Description: SSH from Migrate Server
  TargetSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - PSMTarget
          - SG
      GroupDescription: 'Allow inbound and outbound access for all TCP ports within same VPC and allow inbound access for RDP and SSH from management network'
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: !Ref TargetWorkloadsInterconnectCIDR
          Description: All incoming TCP from within the VPC
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: !Ref ManagementAccessCIDR
          Description: RDP from the management network
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref ManagementAccessCIDR
          Description: SSH from the management network
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: !Ref TargetWorkloadsInterconnectCIDR
          Description: All outgoing TCP from within the VPC
  MigratePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: PSMDefault
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - 'kms:Decrypt'
              - 'ec2:TerminateInstances'
              - 'ec2:DeleteTags'
              - 'ec2:StartInstances'
              - 'kms:Encrypt'
              - 'ec2:CreateTags'
              - 'kms:DescribeKey'
              - 'ec2:RunInstances'
              - 'ec2:StopInstances'
              - 'kms:CreateGrant'
            Resource:
              - 'arn:aws:kms:*:*:key/*'
              - 'arn:aws:ec2:*:*:subnet/*'
              - 'arn:aws:ec2:*:*:instance/*'
              - 'arn:aws:ec2:*:*:volume/*'
              - 'arn:aws:ec2:*:*:security-group/*'
              - 'arn:aws:ec2:*:*:network-interface/*'
              - 'arn:aws:ec2:*::image/*'
          - Sid: VisualEditor1
            Effect: Allow
            Action:
              - 'gamelift:DescribeEC2InstanceLimits'
              - 'ec2:DeregisterImage'
              - 'ec2:DeleteSnapshot'
              - 'ec2:DescribeInstances'
              - 'ec2:DescribeRegions'
              - 'ec2:CreateImage'
              - 'ec2:DescribeSnapshots'
              - 'ec2:DescribePlacementGroups'
              - 'ec2:DescribeSecurityGroups'
              - 'pricing:GetProducts'
              - 'ec2:DescribeHosts'
              - 'ec2:DescribeImages'
              - 'ec2:DescribeAvailabilityZones'
              - 'ec2:DescribeVpcs'
              - 'kms:ListAliases'
              - 'ec2:DescribeVolumes'
              - 'ec2:DescribeAccountAttributes'
              - 'ec2:DescribeReservedInstances'
              - 'ec2:ModifyInstanceAttribute'
              - 'ec2:DescribeSubnets'
              - 'ec2:DescribeKeyPairs'
              - 'ec2:DescribeInstanceStatus'
            Resource: '*'
          - Sid: VisualEditor2
            Effect: Allow
            Action:
              - 'ec2:DeleteVolume'
              - 'ec2:CreateVolume'
            Resource: 'arn:aws:ec2:*:*:volume/*'
          - Sid: VisualEditor3
            Effect: Allow
            Action:
              - 'ec2:DetachVolume'
              - 'ec2:AttachVolume'
            Resource:
              - 'arn:aws:ec2:*:*:instance/*'
              - 'arn:aws:ec2:*:*:volume/*'
          - Sid: VisualEditor4
            Effect: Allow
            Action: 'ec2:RunInstances'
            Resource:
              - 'arn:aws:ec2:*:*:subnet/*'
              - 'arn:aws:ec2:*:*:key-pair/*'
              - 'arn:aws:ec2:*:*:instance/*'
              - 'arn:aws:ec2:*::snapshot/*'
              - 'arn:aws:ec2:*:*:launch-template/*'
              - 'arn:aws:ec2:*:*:volume/*'
              - 'arn:aws:ec2:*:*:security-group/*'
              - 'arn:aws:ec2:*:*:placement-group/*'
              - 'arn:aws:ec2:*:*:network-interface/*'
              - 'arn:aws:ec2:*::image/*'
          - Sid: VisualEditor5
            Effect: Allow
            Action: 
              - 's3:GetObject'
              - 'logs:Create*'
              - 'logs:PutLogEvents'
            Resource:
              - 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
              - 'arn:aws:logs:*:*:*'
      Roles:
        - !Ref MigrateRole
  MigrateRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
  MigrateInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref MigrateRole
  PublicStaticIP:
    Type: 'AWS::EC2::EIP'
    Condition: AutoAssignEIP
    Properties:
      Domain: vpc
  MigrateServerNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Condition: AutoAssignEIP
    Properties:
      SubnetId: !Ref PublicSubnetID
      Description: Network Interface for Migrate Server
      GroupSet: 
        - !Ref ServerSecurityGroup
      SourceDestCheck: true
  AssociateMigrateServerNetworkInterface:
    Type: AWS::EC2::EIPAssociation
    Condition: AutoAssignEIP
    Properties:
      AllocationId: !GetAtt PublicStaticIP.AllocationId
      NetworkInterfaceId: !Ref MigrateServerNetworkInterface
  MigrateServerInstance:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT60M
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          roleName: !Ref MigrateRole
          buckets:
            - !Ref QSS3BucketName
      'AWS::CloudFormation::Init':
        configSets:
          config:
            - installTools
            - enableCWLogs
            - prepare
            - setup
            - finalize
        installTools:
          files:
            'C:\cfn\assets\GoogleChromeStandaloneEnterprise64.msi':
              source: >-
                https://dl.google.com/edgedl/chrome/install/GoogleChromeStandaloneEnterprise64.msi
          commands:
            1-install-chrome:
              command: >-
                start /wait c:\cfn\assets\GoogleChromeStandaloneEnterprise64.msi
                /quiet /passive
              waitAfterCompletion: '0'
        enableCWLogs:
          files:
            'C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json':
              content: !Sub |
                {
                  "IsEnabled": true,
                  "EngineConfiguration": {
                    "PollInterval": "00:00:05",
                    "Components": [
                      {
                        "Id": "ApplicationEventLog",
                        "FullName": "AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch",
                        "Parameters": {
                          "LogName": "Application",
                          "Levels": "7"
                        }
                      },
                      {
                        "Id": "SystemEventLog",
                        "FullName": "AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch",
                        "Parameters": {
                          "LogName": "System",
                          "Levels": "7"
                        }
                      },
                      {
                        "Id": "SecurityEventLog",
                        "FullName": "AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch",
                        "Parameters": {
                          "LogName": "Security",
                          "Levels": "7"
                        }
                      },
                      {
                        "Id": "EC2LaunchLog",
                        "FullName": "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                        "Parameters": {
                          "LogDirectoryPath": "C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Log",
                          "TimestampFormat": "yyyy-MM-ddTHH:mm:ss.fffZ:",
                          "Encoding": "ASCII",
                          "Filter": "Ec2Launch.log",
                          "CultureName": "en-US",
                          "TimeZoneKind": "UTC"
                        }
                      },
                      {
                        "Id": "CfnInitLog",
                        "FullName": "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",
                        "Parameters": {
                          "LogDirectoryPath": "C:\\cfn\\log",
                          "TimestampFormat": "yyyy-MM-dd HH:mm:ss,fff",
                          "Encoding": "ASCII",
                          "Filter": "cfn-init.log",
                          "CultureName": "en-US",
                          "TimeZoneKind": "Local"
                        }
                      },
                      {
                        "Id": "MemoryPerformanceCounter",
                        "FullName": "AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch",
                        "Parameters": {
                          "CategoryName": "Memory",
                          "CounterName": "Available MBytes",
                          "InstanceName": "",
                          "MetricName": "Memory",
                          "Unit": "Megabytes",
                          "DimensionName": "",
                          "DimensionValue": ""
                        }
                      },
                      {
                        "Id": "CloudWatchApplicationEventLog",
                        "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                        "Parameters": {
                          "AccessKey": "",
                          "SecretKey": "",
                          "Region": "${AWS::Region}",
                          "LogGroup": "${MigrateServerLogGroup}",
                          "LogStream": "PSM/{instance_id}/ApplicationEventLog"
                        }
                      },
                      {
                        "Id": "CloudWatchSystemEventLog",
                        "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                        "Parameters": {
                          "AccessKey": "",
                          "SecretKey": "",
                          "Region": "${AWS::Region}",
                          "LogGroup": "${MigrateServerLogGroup}",
                          "LogStream": "PSM/{instance_id}/SystemEventLog"
                        }
                      },
                      {
                        "Id": "CloudWatchSecurityEventLog",
                        "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                        "Parameters": {
                          "AccessKey": "",
                          "SecretKey": "",
                          "Region": "${AWS::Region}",
                          "LogGroup": "${MigrateServerLogGroup}",
                          "LogStream": "PSM/{instance_id}/SecurityEventLog"
                        }
                      },
                      {
                        "Id": "CloudWatchEC2LaunchLog",
                        "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                        "Parameters": {
                          "AccessKey": "",
                          "SecretKey": "",
                          "Region": "${AWS::Region}",
                          "LogGroup": "${MigrateServerLogGroup}",
                          "LogStream": "PSM/{instance_id}/EC2LaunchLog"
                        }
                      },
                      {
                        "Id": "CloudWatchCfnInitLog",
                        "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",
                        "Parameters": {
                          "AccessKey": "",
                          "SecretKey": "",
                          "Region": "${AWS::Region}",
                          "LogGroup": "${MigrateServerLogGroup}",
                          "LogStream": "PSM/{instance_id}/CfnInitLog"
                        }
                      },
                      {
                        "Id": "CloudWatch",
                        "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch",
                        "Parameters": {
                          "AccessKey": "",
                          "SecretKey": "",
                          "Region": "${AWS::Region}",
                          "NameSpace": "Windows/Default"
                        }
                      }
                    ],
                    "Flows": {
                      "Flows": [
                        "ApplicationEventLog,CloudWatchApplicationEventLog",
                        "SystemEventLog,CloudWatchSystemEventLog",
                        "SecurityEventLog,CloudWatchSecurityEventLog",
                        "EC2LaunchLog,CloudWatchEC2LaunchLog",
                        "CfnInitLog,CloudWatchCfnInitLog",
                        "MemoryPerformanceCounter,CloudWatch"
                      ]
                    }
                  }
                }
          commands:
            1-enable-ssm-agent:
              command: powershell.exe -Command "Set-Service -Name AmazonSSMAgent -StartupType Automatic"
              waitAfterCompletion: '0'
            2-restart-ssm-agent:
              command: powershell.exe -Command "Restart-Service AmazonSSMAgent"
              ignoreErrors: true
              waitAfterCompletion: '0'
        prepare:
          files:
            'C:\cfn\scripts\Unzip-Archive.ps1':
              source: !Sub >-
                  https://${QSS3BucketName}.s3-${AWS::Region}.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-microsoft-utilities/scripts/Unzip-Archive.ps1
            'C:\cfn\modules\AWSQuickStart.zip':
              source: !Sub >-
                  https://${QSS3BucketName}.s3-${AWS::Region}.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-microsoft-utilities/modules/AWSQuickStart.zip
            'C:\cfn\scripts\Join-Domain.ps1':
              source: !Sub >-
                  https://${QSS3BucketName}.s3-${AWS::Region}.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-microsoft-utilities/scripts/Join-Domain.ps1
            'C:\cfn\scripts\Rename-Computer.ps1':
              source: !Sub >-
                  https://${QSS3BucketName}.s3-${AWS::Region}.amazonaws.com/${QSS3KeyPrefix}submodules/quickstart-microsoft-utilities/scripts/Rename-Computer.ps1
            'C:\cfn\scripts\Create-MigrateAdmin.ps1':
              source: !Sub >-
                  https://${QSS3BucketName}.s3-${AWS::Region}.amazonaws.com/${QSS3KeyPrefix}scripts/Create-MigrateAdmin.ps1
            'C:\cfn\scripts\Provision.ps1':
              source: !Sub >-
                  https://${QSS3BucketName}.s3-${AWS::Region}.amazonaws.com/${QSS3KeyPrefix}scripts/Provision.ps1
            'C:\cfn\cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}

            'C:\cfn\hooks.d\cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.MigrateServerInstance.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe -v -c config -s ${AWS::StackId} --resource MigrateServerInstance --region ${AWS::Region}

          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - 'C:\cfn\cfn-hup.conf'
                  - 'C:\cfn\hooks.d\cfn-auto-reloader.conf'
          commands:
            1-set-execution-policy:
              command:
                powershell.exe
                  -Command "Set-ExecutionPolicy RemoteSigned"
                  -Force
              ignoreErrors: true
              waitAfterCompletion: '0'
            2-unpack-quickstart-module:
              command:
                powershell.exe
                  -File C:\cfn\scripts\Unzip-Archive.ps1
                    -Source C:\cfn\modules\AWSQuickStart.zip
                    -Destination C:\Windows\system32\WindowsPowerShell\v1.0\Modules\
              waitAfterCompletion: '0'
            3-init-quickstart-module:
              command: !Sub
                powershell.exe
                  -Command New-AWSQuickStartResourceSignal
                    -Stack ${AWS::StackName}
                    -Resource MigrateServerInstance
                    -Region ${AWS::Region}
              waitAfterCompletion: '0'
        setup:
          commands:
            1-add-migrate-admin:
              command: !Join 
                - ''
                - - >-
                    powershell.exe -Command "C:\cfn\scripts\Create-MigrateAdmin.ps1
                    -Name '
                  - !Ref MigrateAdminUsername
                  - ''' -Password '''
                  - !Ref MigrateAdminPassword
                  - '''"'
              waitAfterCompletion: '0'
            2-rename-computer:
              command: !Sub
                - powershell.exe
                    -File C:\cfn\scripts\Rename-Computer.ps1
                      -NewName ${InstanceHostname}
                      -Restart
                - InstanceHostname: !Ref MigrateServerHostname
              waitAfterCompletion: forever
            3-provision-migrate-server:
              command: !Join 
                - ''
                - - >-
                    powershell.exe -File C:\cfn\scripts\Provision.ps1
                  - !If
                    - AutoAssignEIP
                    - ' -UsePublicIP'
                    - !Ref 'AWS::NoValue'
              waitAfterCompletion: '0'
        finalize:
          commands:
            1-signal-success:
              command: powershell.exe -Command "Write-AWSQuickStartStatus"
              waitAfterCompletion: '0'
    Properties:
      InstanceType: !Ref MigrateServerInstanceType
      ImageId: !FindInMap 
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - PSM201811AMI
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref MigrateInstanceProfile
      BlockDeviceMappings:
        - DeviceName: '/dev/sda1'
          Ebs:
            VolumeSize: '70'
            DeleteOnTermination: "true"
      NetworkInterfaces: !If
        - AutoAssignEIP
        - -
            NetworkInterfaceId: !Ref MigrateServerNetworkInterface
            DeviceIndex: 0
        - - SubnetId: !Ref PublicSubnetID
            GroupSet:
              - !Ref ServerSecurityGroup
            AssociatePublicIpAddress: 'true'
            DeviceIndex: '0'
            DeleteOnTermination: 'true' 
      Tags:
        - Key: Name
          Value: !Join 
            - ''
            - - !Ref 'AWS::StackName'
              - '-'
              - !Ref MigrateServerHostname
      UserData: 
        Fn::Base64: 
          !Sub |
            <script>
              rem Uninstall Amazon SSM Agent and AWS CLI to allow updating
              wmic product where "description='Amazon SSM Agent' " uninstall
              wmic product where "description='aws-cfn-bootstrap' " uninstall

              rem Install latest AWS CloudFormation Helper Scripts
              start /wait c:\Windows\system32\msiexec /passive /qn /i https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-win64-latest.msi

              rem Download and run the latest Amazon SSM Agent setup
              powershell.exe -Command "iwr https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/windows_amd64/AmazonSSMAgentSetup.exe -UseBasicParsing -OutFile C:\AmazonSSMAgentSetup.exe"
              start /wait C:\AmazonSSMAgentSetup.exe /install /quiet

              rem Run  cfn-init helper to process AWS::CloudFormation::Init directives
              cfn-init.exe -v -c config -s ${AWS::StackName} --resource MigrateServerInstance --region ${AWS::Region}
            </script>
  MigrateServerLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: '7'
  RecoveryAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: >-
        Trigger a recovery when PlateSpin Migrate server instance status check
        fails for 15 consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '15'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      AlarmActions:
        - !Sub 'arn:aws:automate:${AWS::Region}:ec2:recover'
        - !If
          - HaveSNSTopicMailID
          - !Ref AlarmNotificationTopic
          - !Ref 'AWS::NoValue'
      Dimensions:
        - Name: InstanceId
          Value: !Ref MigrateServerInstance
  CPUAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: HaveSNSTopicMailID
    Properties:
      AlarmDescription: >-
        CPU alarm when PlateSpin Migrate server instance CPU usage average
        percentage exceeds 90%
      AlarmActions:
        - !Ref AlarmNotificationTopic
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '3'
      Threshold: '90'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref MigrateServerInstance
  AlarmNotificationTopic:
    Type: 'AWS::SNS::Topic'
    Condition: HaveSNSTopicMailID
    Properties:
      Subscription:
        - Endpoint: !Ref SNSTopicMailID
          Protocol: email
Outputs:
  MigrateServerURL:
    Description: The URL of the deployed PlateSpin Migrate server
    Value: !Join 
      - ''
      - - 'https://'
        - !If
          - AutoAssignEIP
          - !GetAtt MigrateServerInstance.PublicDnsName
          - !GetAtt MigrateServerInstance.PrivateIp
        - /migrate
  MigrateServerIP:
    Description: The IP address of the deployed PlateSpin Migrate server instance    
    Value: !If
      - AutoAssignEIP
      - !GetAtt MigrateServerInstance.PublicIp
      - !GetAtt MigrateServerInstance.PrivateIp
  MigrateServerInstanceID:
    Description: The PlateSpin Migrate server EC2 instance ID
    Value: !Ref MigrateServerInstance
  MigrateServerLogGroupName:
    Description: The name of the CloudWatch log group
    Value: !Ref MigrateServerLogGroup
